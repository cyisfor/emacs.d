;; https://github.com/roelvandijk/emacs-haskell-unicode-input-method
(error "ALREADY DONE")
;; read from https://wiki.haskell.org/Emacs/Unicode_symbols
;; this is just for parsing... should hard-code it when possible via printing

(defvar haskell-shortcuts
  (eval-when-compile
    (defun cleanup-badpat (bad)
      (let ((re (rx ?\\ ?( (group (minimal-match (one-or-more nonl))) ?\\ ?))))
        (and (string-match re bad)
             (match-string 1 bad))))
    
    (let ((badsymbols '(decode-char 'ucs (case name                                             
                                           (left-arrow 8592)
                                           (up-arrow 8593)
                                           (right-arrow 8594)
                                           (down-arrow 8595)                                                
                                           (double-vertical-bar #X2551)                  
                                           (equal #X003d)
                                           (not-equal #X2260)
                                           (identical #X2261)
                                           (not-identical #X2262)
                                           (less-than #X003c)
                                           (greater-than #X003e)
                                           (less-than-or-equal-to #X2264)
                                           (greater-than-or-equal-to #X2265)                        
                                           (logical-and #X2227)
                                           (logical-or #X2228)
                                           (logical-neg #X00AC)                                                  
                                           ('nil #X2205)
                                           (horizontal-ellipsis #X2026)
                                           (double-exclamation #X203C)
                                           (prime #X2032)
                                           (double-prime #X2033)
                                           (for-all #X2200)
                                           (there-exists #X2203)
                                           (element-of #X2208)              
                                           (square-root #X221A)
                                           (squared #X00B2)
                                           (cubed #X00B3)                                            
                                           (lambda #X03BB)
                                           (alpha #X03B1)
                                           (beta #X03B2)
                                           (gamma #X03B3)
                                           (delta #X03B4))))
          (badpatterns '(list (cons "\\(<-\\)" 'left-arrow)
                              (cons "\\(->\\)" 'right-arrow)
                              (cons "\\(==\\)" 'identical)
                              (cons "\\(/=\\)" 'not-identical)
                              (cons "\\(()\\)" 'nil)
                              (cons "\\<\\(sqrt\\)\\>" 'square-root)
                              (cons "\\(&&\\)" 'logical-and)
                              (cons "\\(||\\)" 'logical-or)
                              (cons "\\<\\(not\\)\\>" 'logical-neg)
                              (cons "\\(>\\)\\[^=\\]" 'greater-than)
                              (cons "\\(<\\)\\[^=\\]" 'less-than)
                              (cons "\\(>=\\)" 'greater-than-or-equal-to)
                              (cons "\\(<=\\)" 'less-than-or-equal-to)
                              (cons "\\<\\(alpha\\)\\>" 'alpha)
                              (cons "\\<\\(beta\\)\\>" 'beta)
                              (cons "\\<\\(gamma\\)\\>" 'gamma)
                              (cons "\\<\\(delta\\)\\>" 'delta)
                              (cons "\\(''\\)" 'double-prime)
                              (cons "\\('\\)" 'prime)
                              (cons "\\(!!\\)" 'double-exclamation)
                              (cons "\\(\\.\\.\\)" 'horizontal-ellipsis))))
      (let (
            ;;(decode-char 'ucs (case name entries...))
            (badsymbols (cddr (caddr badsymbols)))
            ;;(list entries) entry: (cons stupidregexp (quote symbol))
            (badpatterns (cdr badpatterns)))
        (let* (
               (patterns (make-hash-table :size (length badsymbols) :test 'equal))
               (codepoints (make-hash-table :size (hash-table-size patterns) :test 'equal)))
          (dolist 
              (badsymbol badsymbols)
            (let ((symbol (car badsymbol))
                  (codepoint (cadr badsymbol)))
              (puthash symbol codepoint codepoints)))
          (dolist (badpat badpatterns patterns)
            (let (
                  (pattern (cleanup-badpat (cadr badpat)))
                  (lookup (cadr (caddr badpat))))
              (when pattern
                (puthash pattern (gethash lookup codepoints) patterns)))))))))

